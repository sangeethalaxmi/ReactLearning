{"mappings":"A,S,E,C,E,O,G,E,U,C,E,O,C,C,C,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,A,W,iB,C,E,E,Q,C,E,Q,S,C,C,C,E,O,c,C,E,O,C,a,C,M,C,E,a,C,C,G,E,E,O,C,U,I,G,I,E,E,S,E,E,S,E,E,S,E,QCIA,OAAM,UAAc,AAAA,EAAA,GAAM,SAAS,CACjC,YAAY,CAAK,CAAE,CACjB,KAAK,CAAC,GACN,QAAQ,GAAG,CAAC,oBACd,CACA,mBAAoB,CAElB,QAAQ,GAAG,CAAC,kBACd,CACA,QAAS,CAGP,OAFA,QAAQ,GAAG,CAAC,iBAGV,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,MADH,C,S,CAEI,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,KAAD,CAAI,SAAA,uB,GAOJ,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAA,OAAG,CAAJ,CACE,KAAK,mBACL,SAAS,WACT,SAAS,gB,G,A,EAIjB,CACF,CACA,IAaA,EAAe,C,G,E,Q,S,C,C,C,E,E,E,O,C,U,I,G,I,E,E,S,E,E,SCxBf,EAtBa,AAAC,IACZ,GAAM,CAAA,KAAE,CAAI,CAAA,SAAE,CAAQ,CAAA,SAAE,CAAQ,CAAE,CAAG,EAC/B,CAAC,EAAO,EAAS,CAAG,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,GAC7B,CAAC,EAAU,EAAY,CAAG,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,GASzC,MARA,AAAA,CAAA,EAAA,EAAA,SAAQ,AAAR,EAAU,KACR,IAAM,EAAQ,YAAY,KACxB,QAAQ,GAAG,CAAC,uBACd,EAAG,KACH,MAAO,KACL,cAAc,EAChB,CACF,EAAG,EAAE,EAEH,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,MADH,CACO,UAAU,W,S,CACb,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,KAAD,C,S,CAAI,SAAO,E,A,GACX,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,KAAD,C,S,CAAI,YAAU,E,A,GACd,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,KAAD,C,S,CAAI,YAAU,E,A,GACd,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,KAAD,CAAK,SAAA,C,GACL,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,KAAD,CAAK,SAAA,C,G,A,EAGX,C,G,E,Q,S,C,C,C,E,E,S,I,E,E,S,E,SCpBwB,AAAA,EAAA,GAAM,SAAS,A","sources":["<anon>","src/components/About.js","src/components/User.js","src/components/UserClass.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire041a\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"h0EEC\", function(module, exports) {\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", () => $c621f8cecd50aabc$export$2e2bcd8739ae039);\n\nvar $ayMG0 = parcelRequire(\"ayMG0\");\n\nvar $c4L89 = parcelRequire(\"c4L89\");\n\nvar $acw62 = parcelRequire(\"acw62\");\nparcelRequire(\"j6ssx\");\nclass $c621f8cecd50aabc$var$About extends (0, (/*@__PURE__*/$parcel$interopDefault($acw62))).Component {\n    constructor(props){\n        super(props);\n        console.log(\"parent construtor\");\n    }\n    componentDidMount() {\n        // first consturctor then render is called and after component is rendered the componentdidmount is called\n        console.log(\"parent didmount\");\n    }\n    render() {\n        console.log(\"parent render\");\n        return /*#__PURE__*/ (0, $ayMG0.jsxs)(\"div\", {\n            children: [\n                /*#__PURE__*/ (0, $ayMG0.jsx)(\"h1\", {\n                    children: \"About class component\"\n                }),\n                /*#__PURE__*/ (0, $ayMG0.jsx)((0, $c4L89.default), {\n                    name: \"sangeetha(class)\",\n                    location: \"pollachi\",\n                    username: \"sangeethalaxmo\"\n                })\n            ]\n        });\n    }\n}\nvar // const About = () => {\n//   return (\n//     <div>\n//       <h1>About</h1>\n//       <UserClass\n//         name=\"sangeetha(class)\"\n//         location=\"pollachi\"\n//         username=\"sangeethalaxmo\"\n//       />\n//     </div>\n//   );\n// };\n$c621f8cecd50aabc$export$2e2bcd8739ae039 = $c621f8cecd50aabc$var$About;\n\n});\nparcelRegister(\"c4L89\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $8caa6ae8d778e858$export$2e2bcd8739ae039);\n\nvar $ayMG0 = parcelRequire(\"ayMG0\");\n\nvar $acw62 = parcelRequire(\"acw62\");\nconst $8caa6ae8d778e858$var$User = (props)=>{\n    const { name: name, location: location, username: username } = props;\n    const [count, setCount] = (0, $acw62.useState)(0);\n    const [countTwo, setCountTwo] = (0, $acw62.useState)(1);\n    (0, $acw62.useEffect)(()=>{\n        const timer = setInterval(()=>{\n            console.log(\"Hi this is sangeetha\");\n        }, 1000);\n        return ()=>{\n            clearInterval(timer);\n        };\n    }, []);\n    return /*#__PURE__*/ (0, $ayMG0.jsxs)(\"div\", {\n        className: \"res-card\",\n        children: [\n            /*#__PURE__*/ (0, $ayMG0.jsxs)(\"h2\", {\n                children: [\n                    \"Name: \",\n                    name\n                ]\n            }),\n            /*#__PURE__*/ (0, $ayMG0.jsxs)(\"h3\", {\n                children: [\n                    \"Location:\",\n                    location\n                ]\n            }),\n            /*#__PURE__*/ (0, $ayMG0.jsxs)(\"h3\", {\n                children: [\n                    \"username:\",\n                    username\n                ]\n            }),\n            /*#__PURE__*/ (0, $ayMG0.jsx)(\"h2\", {\n                children: count\n            }),\n            /*#__PURE__*/ (0, $ayMG0.jsx)(\"h2\", {\n                children: countTwo\n            })\n        ]\n    });\n};\nvar $8caa6ae8d778e858$export$2e2bcd8739ae039 = $8caa6ae8d778e858$var$User;\n\n});\n\nparcelRegister(\"j6ssx\", function(module, exports) {\n\nvar $ayMG0 = parcelRequire(\"ayMG0\");\n\nvar $acw62 = parcelRequire(\"acw62\");\n\nvar $gxbk0 = parcelRequire(\"gxbk0\");\nclass $de84a747d6d7450e$var$UserClass extends (0, (/*@__PURE__*/$parcel$interopDefault($acw62))).Component {\n    constructor(props){\n        super(props);\n        // create state\n        this.state = {\n            user: {\n                name: \"dummy\",\n                login: \"dummy\",\n                bio: \"dummy\"\n            },\n            count: 0\n        };\n    // console.log(this.props.name + \"child construtor\");\n    }\n    // this is called only first time when component is rendered\n    async componentDidMount() {\n        // first consturctor then render is called and after component is rendered the componentdidmount is called\n        // console.log(this.props.name + \"child didmount\");\n        const response = await fetch(\"https://api.github.com/users/sangeethalaxmi\");\n        const data = await response.json();\n        console.log(data);\n        this.setState({\n            user: data\n        });\n    }\n    // this is called after each time the component is re-rendered i.e each time some data is updated in component through state\n    componentDidUpdate(prevProps, prevState) {\n        // if we need to perform some action only if particular state is changed then we can add those logics here\n        if (this.state.count != prevState.count) console.log(\"state count changed so call another api\");\n        // what if we need to do some other api call if we change user state again we will write if else here and do it\n        console.log(\"component did update\");\n    }\n    // this is called after user leave the component and navigate to another component\n    componentWillUnmount() {\n        console.log(\"component uncomount\");\n    }\n    render() {\n        // console.log(this.props.name + \"child render\");\n        const { name: name, login: login, bio: bio } = this.state?.user;\n        console.log(this.state?.user?.login);\n        console.log(this.state);\n        // const { count } = this.state;\n        // const { countTwo } = this.state;\n        return /*#__PURE__*/ (0, $ayMG0.jsxs)(\"div\", {\n            className: \"res-card\",\n            children: [\n                /*#__PURE__*/ (0, $ayMG0.jsxs)(\"h2\", {\n                    children: [\n                        \"Name: \",\n                        name\n                    ]\n                }),\n                /*#__PURE__*/ (0, $ayMG0.jsxs)(\"h3\", {\n                    children: [\n                        \"Location:\",\n                        login\n                    ]\n                }),\n                /*#__PURE__*/ (0, $ayMG0.jsxs)(\"h3\", {\n                    children: [\n                        \"username:\",\n                        bio\n                    ]\n                }),\n                /*#__PURE__*/ (0, $ayMG0.jsxs)(\"h4\", {\n                    children: [\n                        \"Count : \",\n                        this.state.count\n                    ]\n                }),\n                /*#__PURE__*/ (0, $ayMG0.jsx)((0, $gxbk0.default).Consumer, {\n                    children: (data)=>{\n                        /*#__PURE__*/ (0, $ayMG0.jsx)(\"h4\", {\n                            children: data.loggedUser\n                        });\n                    }\n                }),\n                /*#__PURE__*/ (0, $ayMG0.jsx)(\"button\", {\n                    onClick: ()=>// never update the state directly\n                        // this.state.count + 1\n                        this.setState({\n                            count: this.state.count + 1\n                        }),\n                    children: \"increment\"\n                })\n            ]\n        });\n    }\n}\nvar $de84a747d6d7450e$export$2e2bcd8739ae039 /**\r\n * component life cycle\r\n * ----Mounting cycle\r\n * Constructor (dummy data)\r\n * render(dummy data)\r\n *    Render html with dummy data\r\n * Component Did mount     --> called only once after first time component is rendered -->similar to useEffect with [] dependcy array\r\n *    <Api clls)\r\n *    <this.setState-->updates state>\r\n * ------Update cycle\r\n * render  (api data)\r\n * update html with api data\r\n * componentDidUpdate is called and then ->this is called when ever there is change in state variable and components re-render again -->similar to useEffect without dependency array or useEffect with particular dependency \r\n * componentDidunmount --> once we move out from one component to another -->event listerner removing in component,data clean to prevennt memory leaks -->similar to clean up function in useEffect\r\n\r\n */  = $de84a747d6d7450e$var$UserClass;\n\n});\n\n\n\n//# sourceMappingURL=About.16878362.js.map\n","import User from \"./User\";\r\nimport React from \"react\";\r\n\r\nimport UserClass from \"./UserClass\";\r\nclass About extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(\"parent construtor\");\r\n  }\r\n  componentDidMount() {\r\n    // first consturctor then render is called and after component is rendered the componentdidmount is called\r\n    console.log(\"parent didmount\");\r\n  }\r\n  render() {\r\n    console.log(\"parent render\");\r\n\r\n    return (\r\n      <div>\r\n        <h1>About class component</h1>\r\n\r\n        {/* <UserClass\r\n          name=\"sangeetha(class)\"\r\n          location=\"pollachi\"\r\n          username=\"sangeethalaxmo\"\r\n        /> */}\r\n        <User\r\n          name=\"sangeetha(class)\"\r\n          location=\"pollachi\"\r\n          username=\"sangeethalaxmo\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// const About = () => {\r\n//   return (\r\n//     <div>\r\n//       <h1>About</h1>\r\n\r\n//       <UserClass\r\n//         name=\"sangeetha(class)\"\r\n//         location=\"pollachi\"\r\n//         username=\"sangeethalaxmo\"\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\nexport default About;\r\n","import { useEffect, useState } from \"react\";\r\nconst User = (props) => {\r\n  const { name, location, username } = props;\r\n  const [count, setCount] = useState(0);\r\n  const [countTwo, setCountTwo] = useState(1);\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      console.log(\"Hi this is sangeetha\");\r\n    }, 1000);\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, []);\r\n  return (\r\n    <div className=\"res-card\">\r\n      <h2>Name: {name}</h2>\r\n      <h3>Location:{location}</h3>\r\n      <h3>username:{username}</h3>\r\n      <h2>{count}</h2>\r\n      <h2>{countTwo}</h2>\r\n    </div>\r\n  );\r\n};\r\nexport default User;\r\n","import React from \"react\";\r\nimport UserContext from \"../utils/UserContext.js\";\r\nclass UserClass extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // create state\r\n    this.state = {\r\n      user: {\r\n        name: \"dummy\",\r\n        login: \"dummy\",\r\n        bio: \"dummy\",\r\n      },\r\n\r\n      count: 0,\r\n      // countTwo: 1,\r\n    };\r\n    // console.log(this.props.name + \"child construtor\");\r\n  }\r\n  // this is called only first time when component is rendered\r\n  async componentDidMount() {\r\n    // first consturctor then render is called and after component is rendered the componentdidmount is called\r\n    // console.log(this.props.name + \"child didmount\");\r\n    const response = await fetch(\"https://api.github.com/users/sangeethalaxmi\");\r\n    const data = await response.json();\r\n    console.log(data);\r\n\r\n    this.setState({\r\n      user: data,\r\n    });\r\n  }\r\n  // this is called after each time the component is re-rendered i.e each time some data is updated in component through state\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // if we need to perform some action only if particular state is changed then we can add those logics here\r\n    if (this.state.count != prevState.count) {\r\n      console.log(\"state count changed so call another api\");\r\n    }\r\n    // what if we need to do some other api call if we change user state again we will write if else here and do it\r\n\r\n    console.log(\"component did update\");\r\n  }\r\n\r\n  // this is called after user leave the component and navigate to another component\r\n  componentWillUnmount() {\r\n    console.log(\"component uncomount\");\r\n  }\r\n\r\n  render() {\r\n    // console.log(this.props.name + \"child render\");\r\n    const { name, login, bio } = this.state?.user;\r\n    console.log(this.state?.user?.login);\r\n    console.log(this.state);\r\n    // const { count } = this.state;\r\n    // const { countTwo } = this.state;\r\n\r\n    return (\r\n      <div className=\"res-card\">\r\n        <h2>Name: {name}</h2>\r\n        <h3>Location:{login}</h3>\r\n        <h3>username:{bio}</h3>\r\n        <h4>Count : {this.state.count}</h4>\r\n        <UserContext.Consumer>\r\n          {(data) => {\r\n            <h4>{data.loggedUser}</h4>;\r\n          }}\r\n        </UserContext.Consumer>\r\n        <button\r\n          onClick={() =>\r\n            // never update the state directly\r\n            // this.state.count + 1\r\n\r\n            this.setState({\r\n              count: this.state.count + 1,\r\n            })\r\n          }\r\n        >\r\n          increment\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserClass;\r\n\r\n/**\r\n * component life cycle\r\n * ----Mounting cycle\r\n * Constructor (dummy data)\r\n * render(dummy data)\r\n *    Render html with dummy data\r\n * Component Did mount     --> called only once after first time component is rendered -->similar to useEffect with [] dependcy array\r\n *    <Api clls)\r\n *    <this.setState-->updates state>\r\n * ------Update cycle\r\n * render  (api data)\r\n * update html with api data\r\n * componentDidUpdate is called and then ->this is called when ever there is change in state variable and components re-render again -->similar to useEffect without dependency array or useEffect with particular dependency \r\n * componentDidunmount --> once we move out from one component to another -->event listerner removing in component,data clean to prevennt memory leaks -->similar to clean up function in useEffect\r\n\r\n */\r\n"],"names":["$parcel$interopDefault","a","__esModule","default","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","value","$c621f8cecd50aabc$export$2e2bcd8739ae039","$ayMG0","$c4L89","$acw62","$c621f8cecd50aabc$var$About","Component","constructor","props","console","log","componentDidMount","render","jsxs","children","jsx","name","location","username","$8caa6ae8d778e858$export$2e2bcd8739ae039","count","setCount","useState","countTwo","setCountTwo","useEffect","timer","setInterval","clearInterval","className"],"version":3,"file":"About.16878362.js.map"}